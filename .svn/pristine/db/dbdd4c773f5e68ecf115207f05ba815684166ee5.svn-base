// pages/home/index/index.js
// socket 连接插件
const io = require('../../../utils/weapp.socket.io')
// socket 连接地址
var socketUrl = 'wss://ceshiapi.1911edu.com'
// socket 状态更新
var socketMessage = ''
// 上下文对象
var that

Page({

    /**
     * 页面的初始数据
     */
    data: {
        bannerList: [
            'https://images.unsplash.com/photo-1551334787-21e6bd3ab135?w=640',
            'https://images.unsplash.com/photo-1551214012-84f95e060dee?w=640',
            'https://images.unsplash.com/photo-1551446591-142875a901a1?w=640'
        ],
        teacherList: [{

        }]
    },
    /**
     * 启动socket
     */
    socketStart: function () {

        // 设置socket连接地址 socketUrl
        const socket = (this.socket = io(
            socketUrl,
        ))

        socket.on('connect', () => {
            this.setData({
                socketMessage: socketMessage += 'SOCKET连接成功 → \n\n'
            })

            // 此处修改为与server约定的数据、格式
            var sendMessage = '{"token":"v3jsoc8476shNFhxgqPAkkjt678","client":"发送内容"}'
            this.socketSendMessage(sendMessage);
        })

        socket.on('connect_error', d => {
            this.setData({
                socketMessage: socketMessage += 'SOCKET连接失败 → \n\n'
            })
        })

        socket.on('connect_timeout', d => {
            this.setData({
                socketMessage: socketMessage += 'SOCKET连接超时 → \n\n'
            })
        })

        socket.on('disconnect', reason => {
            this.setData({
                socketMessage: socketMessage += 'SOCKET连接断开 → \n\n'
            })
        })

        socket.on('reconnect', attemptNumber => {
            this.setData({
                socketMessage: socketMessage += 'SOCKET正在重连 → \n\n'
            })
        })

        socket.on('reconnect_failed', () => {
            this.setData({
                socketMessage: socketMessage += 'SOCKET重连失败 → \n\n'
            })
        })

        socket.on('reconnect_attempt', () => {
            this.setData({
                socketMessage: socketMessage += 'SOCKET正在重连 → \n\n'
            })
        })

        socket.on('error', err => {
            this.setData({
                socketMessage: socketMessage += 'SOCKET连接错误 → \n\n'
            })
        })

        socket.on('message', function (d) {
            this.setData({
                socketMessage: socketMessage += '服务器返回数据 → \n\n'
            })
            that.socketReceiveMessage(d)
        })

    },

    /**
     * 生命周期函数--监听页面加载
     */
    onLoad: function (options) {
        that = this
        // this.socketStart();
    },

    /**
     * 生命周期函数--监听页面初次渲染完成
     */
    onReady: function () {

    },

    /**
     * 生命周期函数--监听页面显示
     */
    onShow: function () {

    },

    /**
     * 生命周期函数--监听页面隐藏
     */
    onHide: function () {

    },

    /**
     * 生命周期函数--监听页面卸载
     */
    onUnload: function () {

    },

    /**
     * 页面相关事件处理函数--监听用户下拉动作
     */
    onPullDownRefresh: function () {

    },

    /**
     * 页面上拉触底事件的处理函数
     */
    onReachBottom: function () {

    },

    /**
     * 用户点击右上角分享
     */
    onShareAppMessage: function () {

    }
})